using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class UIFurnituresComp : MonoBehaviour
{
    #region (+) slotsvar
    GameObject[] _slots;
    RectTransform[] _slotsrectarr;
    Image[] _slotsimagearr;
    [SerializeField]
    Sprite[] _slotsspritearr;
    Vector2 _slotboxsize;
    Vector2 _slotboxposition;

    int _slotsarraylen;
    int _slotscolumnlen;
    int _slotsfinalrowlen;
    int _slotsmaxrownum;

    int temprow; int tempcolumn; float temptime = 0; bool _doubleclickmode = false; bool _doubleclickmodetest = false; Vector2 _mouseclickpos;
    #endregion;
    #region (+) furnituresvar
    GameObject furni;
    RaycastHit hit;
    Ray ray;
    [SerializeField]
    GameObject[] _funituremodels;
    bool _mouseclick = false;

    furniture[] _furniarr;
    GameObject[] _furniturethumbs;
    RectTransform[] _furniturethumbsrects;
    Image[] _furniturethumbsimages;
    [SerializeField]
    Sprite[] _furniturethumbssprites;

    GameObject _clickedfurniture;
    RectTransform _clickedfurniturerect;
    Image _clickedfurnitureimage;

    #endregion
    #region (+) explanationvar
    GameObject _explanationbox;
    GameObject _explanationtext;

    #endregion

    void Awake()
    {
        #region (+) slots
        _slotsarraylen = 8;
        _slotscolumnlen = 3;
        _slotsmaxrownum = _slotsarraylen / _slotscolumnlen;
        _slotsfinalrowlen = _slotsarraylen % _slotscolumnlen;
        _slotboxsize = new Vector2(150, 150);
        _slotboxposition = new Vector2(50, -200);

        _slots = new GameObject[_slotsarraylen];
        _slotsrectarr = new RectTransform[_slotsarraylen];
        _slotsimagearr = new Image[_slotsarraylen];
        for (int i=0; i<_slotsarraylen; i++)
        {
            _slots[i] = new GameObject();
            if (_slots[i].GetComponent<RectTransform>() == null)
            {
                _slots[i].AddComponent<RectTransform>();
                _slotsrectarr[i] = _slots[i].GetComponent<RectTransform>();
                _slots[i].transform.SetParent(this.transform);
            }
            else
                _slotsrectarr[i] = _slots[i].GetComponent<RectTransform>();
            if (_slots[i].GetComponent<Image>() == null)
            {
                _slots[i].AddComponent<Image>();
                _slotsimagearr[i] = _slots[i].GetComponent<Image>();
            }
            else
                _slotsimagearr[i] = _slots[i].GetComponent<Image>();
        }

        _furniarr = new furniture[_slotsarraylen];
        _furniarr[0] = new furniture("가구0", 0);
        _furniarr[0] = new furniture("가구1", 1);
        _furniarr[0] = new furniture("가구2", 2);
        _furniarr[0] = new furniture("가구3", 3);
        _furniarr[0] = new furniture("가구4", 4);
        _furniarr[0] = new furniture("가구5", 5);
        _furniarr[0] = new furniture("가구6", 6);
        _furniarr[0] = new furniture("가구7", 7);

        _furniturethumbs = new GameObject[_slotsarraylen];
        _furniturethumbsrects = new RectTransform[_slotsarraylen];
        _furniturethumbsimages = new Image[_slotsarraylen];

        for (int i = 0; i < _slotsarraylen; i++)
        {
            _furniturethumbs[i] = new GameObject();
            if (_furniturethumbs[i].GetComponent<RectTransform>() == null)
            {
                _furniturethumbs[i].AddComponent<RectTransform>();
                _furniturethumbsrects[i] = _furniturethumbs[i].GetComponent<RectTransform>();
                _furniturethumbs[i].transform.SetParent(this.transform);
            }
            else
                _furniturethumbsrects[i] = _furniturethumbs[i].GetComponent<RectTransform>();
            if (_furniturethumbs[i].GetComponent<Image>() == null)
            {
                _furniturethumbs[i].AddComponent<Image>();
                _furniturethumbsimages[i] = _furniturethumbs[i].GetComponent<Image>();
            }
            else
                _furniturethumbsimages[i] = _furniturethumbs[i].GetComponent<Image>();
        }


        for (int i = 0; i < _slotsmaxrownum; i++)
        {
            for(int j=0; j<_slotscolumnlen; j++)
            {
                _slotsrectarr[_slotscolumnlen * i + j].sizeDelta = _slotboxsize;
                _slotsrectarr[_slotscolumnlen * i + j].pivot = new Vector2(0, 1);
                _slotsrectarr[_slotscolumnlen * i + j].localPosition = new Vector2(_slotboxposition.x + j * _slotboxsize.x,
                    _slotboxposition.y - i * _slotboxsize.y);
                _slotsrectarr[_slotscolumnlen * i + j].anchorMin = new Vector2(0.5f, 0.5f);
                _slotsrectarr[_slotscolumnlen * i + j].anchorMax = new Vector2(0.5f, 0.5f);
                _slotsimagearr[_slotscolumnlen * i + j].sprite = _slotsspritearr[0];
                Debug.Log("("+i+", "+j+")"+ (_slotscolumnlen * i + j));

                _furniturethumbsrects[_slotscolumnlen * i + j].sizeDelta = _slotboxsize;
                _furniturethumbsrects[_slotscolumnlen * i + j].pivot = new Vector2(0, 1);
                _furniturethumbsrects[_slotscolumnlen * i + j].localPosition = new Vector2(_slotboxposition.x + j * _slotboxsize.x,
                    _slotboxposition.y - i * _slotboxsize.y);
                _furniturethumbsrects[_slotscolumnlen * i + j].anchorMin = new Vector2(0.5f, 0.5f);
                _furniturethumbsrects[_slotscolumnlen * i + j].anchorMax = new Vector2(0.5f, 0.5f);
                _furniturethumbsimages[_slotscolumnlen * i + j].sprite = _furniturethumbssprites[_slotscolumnlen * i + j];
            }
        }
        for(int k = 0; k<_slotsfinalrowlen; k++)
        {
            _slotsrectarr[_slotscolumnlen * _slotsfinalrowlen + k].sizeDelta = _slotboxsize;
            _slotsrectarr[_slotscolumnlen * _slotsfinalrowlen + k].pivot = new Vector2(0, 1);
            _slotsrectarr[_slotscolumnlen * _slotsfinalrowlen + k].localPosition = new Vector2
                (_slotboxposition.x + k * _slotboxsize.x,
                _slotboxposition.y - _slotsmaxrownum * _slotboxsize.y);
            _slotsrectarr[_slotscolumnlen * _slotsfinalrowlen + k].anchorMin = new Vector2(0.5f, 0.5f);
            _slotsrectarr[_slotscolumnlen * _slotsfinalrowlen + k].anchorMax = new Vector2(0.5f, 0.5f);
            _slotsimagearr[_slotscolumnlen * _slotsfinalrowlen + k].sprite = _slotsspritearr[0];
            Debug.Log("(" + _slotsmaxrownum + ", " + k + ")" + (_slotscolumnlen * _slotsfinalrowlen + k));

            _furniturethumbsrects[_slotscolumnlen * _slotsfinalrowlen + k].sizeDelta = _slotboxsize;
            _furniturethumbsrects[_slotscolumnlen * _slotsfinalrowlen + k].pivot = new Vector2(0, 1);
            _furniturethumbsrects[_slotscolumnlen * _slotsfinalrowlen + k].localPosition = new Vector2(_slotboxposition.x + k * _slotboxsize.x,
                _slotboxposition.y - _slotsmaxrownum * _slotboxsize.y);
            _furniturethumbsrects[_slotscolumnlen * _slotsfinalrowlen + k].anchorMin = new Vector2(0.5f, 0.5f);
            _furniturethumbsrects[_slotscolumnlen * _slotsfinalrowlen + k].anchorMax = new Vector2(0.5f, 0.5f);
            _furniturethumbsimages[_slotscolumnlen * _slotsfinalrowlen + k].sprite = _furniturethumbssprites[_slotscolumnlen * _slotsfinalrowlen + k];
        }
        #endregion
        #region (+) furnitures


        #endregion
        _doubleclickmode = false;
        _clickedfurniture = new GameObject();
        _clickedfurniturerect = new RectTransform();
        if (_clickedfurniture.GetComponent<RectTransform>() == null)
        {
            _clickedfurniture.AddComponent<RectTransform>();
            _clickedfurniturerect = _clickedfurniture.GetComponent<RectTransform>();
            _clickedfurniture.transform.SetParent(this.transform);
        }
        else
            _clickedfurniturerect = _clickedfurniture.GetComponent<RectTransform>();
        if (_clickedfurniture.GetComponent<Image>() == null)
        {
            _clickedfurniture.AddComponent<Image>();
            _clickedfurnitureimage = _clickedfurniture.GetComponent<Image>();
        }
        else
            _clickedfurnitureimage = _clickedfurniture.GetComponent<Image>();
        _clickedfurniture.SetActive(false);
    }

    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {
        if (_slotboxposition.x < Input.mousePosition.x && Input.mousePosition.x < _slotboxposition.x + _slotboxsize.x * _slotscolumnlen &&
        _slotboxposition.y > (Input.mousePosition.y - Screen.height) && (Input.mousePosition.y - Screen.height) > _slotboxposition.y - _slotboxsize.y * (_slotsmaxrownum + 1) &&
        !(_slotboxposition.x + _slotboxsize.x * _slotsfinalrowlen < Input.mousePosition.x && Input.mousePosition.x < _slotboxposition.x + _slotboxsize.x * (_slotsfinalrowlen + 1) &&
        _slotboxposition.y - _slotboxsize.y * _slotsmaxrownum > (Input.mousePosition.y - Screen.height) && (Input.mousePosition.y - Screen.height) > _slotboxposition.y - _slotboxsize.y * (_slotsmaxrownum + 1)))
        {
            if (Input.GetMouseButtonDown(0))
            {
                if (!_doubleclickmodetest)
                {
                    _doubleclickmodetest = true;
                }
                else if(temptime < 0.5f)
                {
                    Debug.Log("더블클릭 성공");
                    temprow = (int)((Screen.height - Input.mousePosition.y + _slotboxposition.y) / _slotboxsize.y);
                    tempcolumn = (int)((Input.mousePosition.x - _slotboxposition.x) / _slotboxsize.x);
                    _doubleclickmode = true;
                }
                else if(temptime >= 0.5f)
                {
                    Debug.Log("느려");
                    temptime = 0;
                    _doubleclickmodetest = false;
                }
            }
        }
        if(_doubleclickmode == true)
        {
            doubleclick();
            temptime = 0;
            _doubleclickmodetest = false;
        }
        if (_doubleclickmodetest == true)
        {
            temptime += Time.deltaTime;
        }

        if (_mouseclick)
        {
            if (Input.GetMouseButtonDown(0) && !(_slotboxposition.x < Input.mousePosition.x && Input.mousePosition.x < _slotboxposition.x + _slotboxsize.x * _slotscolumnlen &&
        _slotboxposition.y > (Input.mousePosition.y - Screen.height) && (Input.mousePosition.y - Screen.height) > _slotboxposition.y - _slotboxsize.y * (_slotsmaxrownum + 1) &&
        !(_slotboxposition.x + _slotboxsize.x * _slotsfinalrowlen < Input.mousePosition.x && Input.mousePosition.x < _slotboxposition.x + _slotboxsize.x * (_slotsfinalrowlen + 1) &&
        _slotboxposition.y - _slotboxsize.y * _slotsmaxrownum > (Input.mousePosition.y - Screen.height) && (Input.mousePosition.y - Screen.height) > _slotboxposition.y - _slotboxsize.y * (_slotsmaxrownum + 1))))
            {
                ray = Camera.main.ScreenPointToRay(Input.mousePosition);
                if (Physics.Raycast(ray, out hit) && hit.transform.gameObject.CompareTag("Terrain"))
                {
                    Vector3 pos = new Vector3(hit.point.x, hit.point.y, hit.point.z);
                    Debug.Log(pos);
                    furni = Instantiate(_funituremodels[_slotscolumnlen * temprow + tempcolumn], pos, Quaternion.identity);
                    Debug.Log("옮김");
                    _clickedfurniture.SetActive(false);
                    _doubleclickmode = false;
                    _mouseclick = false;
                }
            }
        }

    }
    void doubleclick()
    {
        _clickedfurniture.SetActive(true);
        _clickedfurniturerect.localPosition = new Vector2(Input.mousePosition.x, Input.mousePosition.y - Screen.height);
        _clickedfurnitureimage.sprite = _furniturethumbssprites[_slotscolumnlen * temprow + tempcolumn];

        _mouseclick = true;

        if (Input.GetMouseButtonDown(1))
        {
            Debug.Log("취소");
            _clickedfurniture.SetActive(false);
            _doubleclickmode = false;
        }
    }
}
